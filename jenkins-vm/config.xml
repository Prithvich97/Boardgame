<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1540.v295eccc9778f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4150.ve20ca_b_a_a_2815">
    <script>pipeline {
    agent any

tools{
    jdk &apos;jdk17&apos;
    maven &apos;maven3&apos;
    
}

environment{
    SCANNER_HOME= tool &apos;sonar-scanner&apos;
    
}
    
    stages {
        stage(&apos;Git Checkout&apos;) {
            steps {
                git branch: &apos;main&apos;, 
                    credentialsId: &apos;git-cred&apos;, 
                    url: &apos;https://github.com/Prithvich97/Boardgame.git&apos;
            }
        }
        
        stage(&apos;compile&apos;) {
            steps {
                sh &apos;mvn compile&apos;
            }
        }
        
        
        stage(&apos;test&apos;) {
            steps {
                sh &apos;mvn test&apos;
            }
        }
        
        stage(&apos;File system scan&apos;) {
            steps {
                sh &apos;&apos;&apos;
            apt-get update &amp;&amp; apt-get install -y wget
            wget -qO trivy.deb https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.51.1_Linux-64bit.deb
            dpkg -i trivy.deb
            trivy fs --format table -o trivy-report.html .
        &apos;&apos;&apos;
            }
        }
        
        stage(&apos;SonarQube Analysis&apos;) {
            steps {
                withSonarQubeEnv(&apos;sonar&apos;) {
                    sh &apos;&apos;&apos; $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame -Dsonar.projectKey= BoardGame \
                    -Dsonar.java.binaries=. &apos;&apos;&apos;
                    
                }
            }
        }
        
        stage(&apos;Quality Gate &apos;) {
            steps {
                script{
                    waitForQualityGate abortPipeline: false , credentialsId: &apos;sonar-token&apos;
                }
            }
        }
        
        stage(&apos;Build&apos;) {
            steps {
                sh &apos;mvn package&apos;
            }
        }
        
        stage(&apos;Publish To nexus&apos;) {
            steps {
                withMaven(globalMavenSettingsConfig: &apos;global-settings&apos;, jdk: &apos;jdk17&apos;, maven: &apos;maven3&apos;, mavenSettingsConfig: &apos;&apos;, traceability: true) {
                    sh &apos;mvn deploy&apos;
    
               }
            }
        }
        
        
        
        
        stage(&apos;Build&amp; Tag Docker Image&apos;) {
            steps {
                script{
                    withDockerRegistry(credentialsId: &apos;docker-cred&apos;, toolName: &apos;docker&apos;) {
                        sh&apos;docker build -t prithvich97/boardgame:latest .&apos;
        
                    }
                }
            }
        }
        
        stage(&apos;Docker Image scan&apos;) {
            steps {
                sh &apos;&apos;&apos;
            trivy image --format table -o trivy-image-report.html prithvich97/boardgame:latest
        &apos;&apos;&apos;
            }
        }
        
        
        stage(&apos;Push Docker Image&apos;) {
            steps {
                script{
                    withDockerRegistry(credentialsId: &apos;docker-cred&apos;, toolName: &apos;docker&apos;) {
                        sh&apos;docker push -t prithvich97/boardgame:latest&apos;
        
                    }
                }
            }
        }
        
         stage(&apos;Deploy to Kubernetes&apos;) {
            steps {
                withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;kubernetes&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-cred&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;https://172.31.84.89:6443&apos;) {
                    sh &apos;kubectl apply -f deployment-service.yaml&apos;
                  }
            }
        }
        
        
        
       stage(&apos;Verify The Deployment&apos;) {
            steps {
                withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;kubernetes&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-cred&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;https://172.31.84.89:6443&apos;) {
                    sh &apos;kubectl get pods -n webapps&apos;
                    sh &apos;kubectl get svc -n webapps&apos;
                  }
            }
        }
        
    }
    
    post {
    success {
        emailext(
            to: &apos;prithvich97@gmail.com&apos;,
            subject: &quot;✅ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}&quot;,
            mimeType: &apos;text/html&apos;,
            body: &quot;&quot;&quot;
                &lt;html&gt;
                    &lt;body&gt;
                        &lt;h2 style=&quot;color:green;&quot;&gt;Build Succeeded!&lt;/h2&gt;
                        &lt;p&gt;&lt;b&gt;Project:&lt;/b&gt; ${env.JOB_NAME}&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Build Number:&lt;/b&gt; ${env.BUILD_NUMBER}&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Build URL:&lt;/b&gt; &lt;a href=&quot;${env.BUILD_URL}&quot;&gt;${env.BUILD_URL}&lt;/a&gt;&lt;/p&gt;
                    &lt;/body&gt;
                &lt;/html&gt;
            &quot;&quot;&quot;,
            attachLog: false,
            attachmentsPattern: &apos;trivy-image-report.html&apos; // Example: Attach all HTML reports under target/
        )
    }

    failure {
        emailext(
            to: &apos;prithvich97@gmail.com&apos;,
            subject: &quot;❌ FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}&quot;,
            mimeType: &apos;text/html&apos;,
            body: &quot;&quot;&quot;
                &lt;html&gt;
                    &lt;body&gt;
                        &lt;h2 style=&quot;color:red;&quot;&gt;Build Failed!&lt;/h2&gt;
                        &lt;p&gt;&lt;b&gt;Project:&lt;/b&gt; ${env.JOB_NAME}&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Build Number:&lt;/b&gt; ${env.BUILD_NUMBER}&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Build URL:&lt;/b&gt; &lt;a href=&quot;${env.BUILD_URL}&quot;&gt;${env.BUILD_URL}&lt;/a&gt;&lt;/p&gt;
                        &lt;p&gt;Please check the attached logs or reports for more information.&lt;/p&gt;
                    &lt;/body&gt;
                &lt;/html&gt;
            &quot;&quot;&quot;,
            attachLog: true, // Attach full console log
            attachmentsPattern: &apos;**/target/*.log&apos; // Example: Attach all log files in target/
        )
    }
}

    
    
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>